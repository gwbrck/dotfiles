################################
###########  Basic  ############
################################
source ~/.config/zsh-plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.config/zsh-plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
export CLICOLOR=1
autoload -U colors && colors

setopt AUTO_PARAM_SLASH        # tab completing directory appends a slash
setopt AUTO_PUSHD              # [default] cd automatically pushes old dir onto dir stack
setopt AUTO_RESUME             # allow simple commands to resume backgrounded jobs
setopt GLOB_DOTS               # .dotfiles 
setopt CORRECT                 # [default] command auto-correction
setopt CORRECT_ALL             # [default] argument auto-correction
setopt NO_FLOW_CONTROL         # disable start (C-s) and stop (C-q) characters
setopt LIST_PACKED             # make completion lists more densely packed
setopt NO_NOMATCH              # [default] unmatched patterns are left unchanged
setopt PUSHD_IGNORE_DUPS       # don't push multiple copies of same dir onto stack
setopt PUSHD_SILENT            # [default] don't print dir stack after pushing/popping
setopt PROMPT_SUBST            # Allow for functions in the prompt.
setopt no_prompt_bang
setopt prompt_percent
setopt NO_CASE_GLOB            # Case Insensitive Globbing
setopt COMPLETE_ALIASES

alias latex-update="sudo tlmgr update --self --all"
alias biber-cash-reset="rm -rf `biber --cache`"

alias em="emacsclient -c -n -s ~/.cache/emacsserver/emacsen"
alias em-daemon="emacs --bg-daemon=~/.cache/emacsserver/emacsen" 

alias cm='chezmoi'
alias cmcd='chezmoi cd'
alias cmgst='chezmoi git status'
alias cmgaa='chezmoi git add --all'
alias cmgc='chezmoi git commit -v'
alias cme='chezmoi edit'

alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit -v'
alias gcl='git clone --recurse-submodules'
alias gd='git diff'
alias gss='git status -s'
alias gst='git status'

alias vi='nvim'
alias vim='nvim'

alias l='ls -la'
alias ll='ls -l'
alias la='ls -lA'
alias -g ..='cd ..'
alias -g ...='cd ../..'
alias -g ....='cd ../../..'
alias -g .....='cd ../../../..'
alias -g ......='cd ../../../../..'

################################
########### Bindings ###########
################################
bindkey -v
bindkey -M vicmd 'v' edit-command-line
# Use "cbt" capability ("back_tab", as per `man terminfo`), if we have it:
if tput cbt &> /dev/null; then
  bindkey "$(tput cbt)" reverse-menu-complete # make Shift-tab go to previous completion
fi

autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line


# Make CTRL-Z background things and unbackground them.
function fg-bg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}
zle -N fg-bg
bindkey '^Z' fg-bg

################################
########## Completion ##########
################################
autoload -Uz compinit && compinit
autoload bashcompinit && bashcompinit
setopt hash_list_all            # hash everything before completion
setopt completealiases 
zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*' cache-path ~/.config/zsh/.zsh_cache 
zstyle ':completion:*' list-suffixes
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' menu select
zstyle ':completion:*' completer _expand_alias _complete _ignored
# exceptions to auto-correction
alias bundle='nocorrect bundle'
alias cabal='nocorrect cabal'
alias man='nocorrect man'
alias mkdir='nocorrect mkdir'
alias mv='nocorrect mv'
alias stack='nocorrect stack'
alias sudo='nocorrect sudo'

eval "$(bw completion --shell zsh); compdef _bw bw;"

################################
############ Prompt ############
################################
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr "%F{green}$(printf "\U25CF")%f" # default 'S'
zstyle ':vcs_info:*' unstagedstr "%F{yellow}$(printf "\U25CF")%f" # default 'U'
zstyle ':vcs_info:git+set-message:*' hooks git-untracked
zstyle ':vcs_info:git*:*' formats '[%r|%b%m%c%u] ' # default ' (%s)-[%b]%c%u-'
zstyle ':vcs_info:git*:*' actionformats '[%r|%b|%a|%m%c%u] ' # default ' (%s)-[%b|%a]%c%u-'

function +vi-git-untracked() {
  emulate -L zsh
  if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
    hook_com[unstaged]+="%F{red}$(printf "\U25CF")%f"
  fi
}


P1_BASE="%B%(1j.$(printf "\U223F").)%(?..%F{red}$(printf "\U2203")%? %f)"
P1_BASE+="%F{white}%(5~.%-3~··%1~.%~)%f%b "
P1_BASE+='${vcs_info_msg_0_}'
P1_BASE+="%B%F{blue}$(printf "\U276f") %b%f"
export PS1=$P1_BASE
export SPROMPT="zsh: correct %F{red}'%R'%f to %F{red}'%r'%f [%B%Uy%u%bes, %B%Un%u%bo, %B%Ue%u%bdit, %B%Ua%u%bbort]? "


typeset -A __GWBRCK
function -record-command() {
  __GWBRCK[LAST_COMMAND]="$2"
}
add-zsh-hook preexec -record-command

# Update vcs_info (slow) after any command that probably changed it.
function -maybe-show-vcs-info() {
  local LAST="$__GWBRCK[LAST_COMMAND]"

  # In case user just hit enter, overwrite LAST_COMMAND, because preexec
  # won't run and it will otherwise linger.
  __GWBRCK[LAST_COMMAND]="<unset>"

  # Check first word; via:
  # http://tim.vanwerkhoven.org/post/2012/10/28/ZSH/Bash-string-manipulation
  case "$LAST[(w)1]" in
    cd|cp|git|rm|touch|mv)
      vcs_info
      ;;
    *)
      ;;
  esac
}
add-zsh-hook precmd -maybe-show-vcs-info

################################
##### Emacs vterm support ######
################################
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh
fi

eval "$(pyenv init -)"
